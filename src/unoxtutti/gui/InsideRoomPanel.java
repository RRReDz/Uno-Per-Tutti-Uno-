/* 
 * Progetto UnoXTutto per l'esame di Sviluppo Applicazione Software.
 * Rossi Riccardo, Giacobino Davide, Sguotti Leonardo
 */
package unoxtutti.gui;

import javax.swing.JOptionPane;
import unoxtutti.GiocarePartitaController;
import unoxtutti.UnoXTutti;
import unoxtutti.domain.Player;
import unoxtutti.domain.RemoteRoom;
import unoxtutti.utils.DebugHelper;
import unoxtutti.utils.GUIUtils;

/**
 * Questo pannello fornisce informazioni su una stanza e d&agrave; accesso alle
 * operazioni che l'utente pu&ograve; eseguire appena entrato in una stanza
 *
 * @author picardi
 */
public class InsideRoomPanel extends MainWindowSubPanel {

    private RemoteRoom currentRoom;

    /**
     * Creates new form InsideRoomPanel
     */
    public InsideRoomPanel() {
        initComponents();
    }

    @Override
    public void initializeContent() {
        currentRoom = UnoXTutti.theUxtController.getCurrentRoom();
        this.playersList.setModel(currentRoom.getPlayersAsList());
        this.matchList.setModel(currentRoom.getAvailableMatchesAsList());
        this.roomNameLabel.setText("Stanza: " + currentRoom.getName());
    }

    /**
     * This method is called from within the constructor to initialize the form.
     * WARNING: Do NOT modify this code. The content of this method is always
     * regenerated by the Form Editor.
     */
    @SuppressWarnings("unchecked")
    // <editor-fold defaultstate="collapsed" desc="Generated Code">//GEN-BEGIN:initComponents
    private void initComponents() {

        javax.swing.JSplitPane jSplitPane1 = new javax.swing.JSplitPane();
        jPanel1 = new javax.swing.JPanel();
        jScrollPane1 = new javax.swing.JScrollPane();
        playersList = new javax.swing.JList<>();
        jLabel1 = new javax.swing.JLabel();
        roomPanel = new javax.swing.JPanel();
        jLabel2 = new javax.swing.JLabel();
        jScrollPane2 = new javax.swing.JScrollPane();
        matchList = new javax.swing.JList<>();
        jPanel4 = new javax.swing.JPanel();
        createMatchButton = new javax.swing.JButton();
        joinMatchButton = new javax.swing.JButton();
        javax.swing.JPanel jPanel2 = new javax.swing.JPanel();
        roomNameLabel = new javax.swing.JLabel();
        roomExitButton = new javax.swing.JButton();

        setLayout(new java.awt.BorderLayout());

        jSplitPane1.setDividerLocation(200);

        jPanel1.setBorder(javax.swing.BorderFactory.createEmptyBorder(10, 10, 10, 10));
        jPanel1.setLayout(new java.awt.BorderLayout());

        playersList.setSelectionMode(javax.swing.ListSelectionModel.SINGLE_SELECTION);
        playersList.setName("playersList"); // NOI18N
        jScrollPane1.setViewportView(playersList);

        jPanel1.add(jScrollPane1, java.awt.BorderLayout.CENTER);

        jLabel1.setText("Giocatori:");
        jPanel1.add(jLabel1, java.awt.BorderLayout.PAGE_START);

        jSplitPane1.setLeftComponent(jPanel1);

        roomPanel.setBorder(javax.swing.BorderFactory.createEmptyBorder(10, 10, 10, 10));
        roomPanel.setPreferredSize(new java.awt.Dimension(100, 399));
        roomPanel.setLayout(new java.awt.BorderLayout());

        jLabel2.setText("Partite disponibili:");
        roomPanel.add(jLabel2, java.awt.BorderLayout.PAGE_START);

        jScrollPane2.setViewportView(matchList);

        roomPanel.add(jScrollPane2, java.awt.BorderLayout.CENTER);

        createMatchButton.setText("Crea partita");
        createMatchButton.addActionListener(new java.awt.event.ActionListener() {
            public void actionPerformed(java.awt.event.ActionEvent evt) {
                createMatchButtonActionPerformed(evt);
            }
        });
        jPanel4.add(createMatchButton);

        joinMatchButton.setText("Entra in partita");
        joinMatchButton.addActionListener(new java.awt.event.ActionListener() {
            public void actionPerformed(java.awt.event.ActionEvent evt) {
                joinMatchButtonActionPerformed(evt);
            }
        });
        jPanel4.add(joinMatchButton);

        roomPanel.add(jPanel4, java.awt.BorderLayout.PAGE_END);

        jSplitPane1.setRightComponent(roomPanel);

        add(jSplitPane1, java.awt.BorderLayout.CENTER);

        jPanel2.setBorder(javax.swing.BorderFactory.createEmptyBorder(5, 10, 5, 10));
        jPanel2.setLayout(new java.awt.BorderLayout(5, 0));

        roomNameLabel.setFont(new java.awt.Font("Lucida Grande", 1, 18)); // NOI18N
        roomNameLabel.setText("Stanza:");
        jPanel2.add(roomNameLabel, java.awt.BorderLayout.CENTER);

        roomExitButton.setText("Esci");
        roomExitButton.addActionListener(new java.awt.event.ActionListener() {
            public void actionPerformed(java.awt.event.ActionEvent evt) {
                roomExitButtonActionPerformed(evt);
            }
        });
        jPanel2.add(roomExitButton, java.awt.BorderLayout.LINE_END);

        add(jPanel2, java.awt.BorderLayout.NORTH);
    }// </editor-fold>//GEN-END:initComponents

    private void roomExitButtonActionPerformed(java.awt.event.ActionEvent evt) {//GEN-FIRST:event_roomExitButtonActionPerformed
        UnoXTutti.theUxtController.esciDaStanza();
        mainWindow.setGuiState(UnoXTuttiGUI.GUIState.OUTSIDE_ROOM);
    }//GEN-LAST:event_roomExitButtonActionPerformed
    
    
    /**
     * Avvia il flusso di creazione di una partita
     * @param evt Evento generato dal bottone
     */
    private void createMatchButtonActionPerformed(java.awt.event.ActionEvent evt) {//GEN-FIRST:event_createMatchButtonActionPerformed
        NuovaPartitaDialog dia = new NuovaPartitaDialog(mainWindow, true);
        GUIUtils.centerDialogInsideWindow(dia, this.mainWindow);
        dia.setVisible(true);
        
        if(dia.getResult() == JOptionPane.OK_OPTION){
            /**
             * L'utente desidera creare una partita,
             * ha inserito il nome correttamente
             */
            String matchName = dia.getMatchName();
            DebugHelper.log("Creazione della partita '" + matchName + "' in corso...");
            
            /* Tentativo di creazione della partita */
            try {
                this.mainWindow.setWaiting(true);
                GiocarePartitaController.getInstance().creaPartita(matchName, new Object());
            } catch(Exception e) {
                GUIUtils.showException(e, mainWindow);
            } finally {
                this.mainWindow.setWaiting(false);
            }
            
            /* Ho creato con successo la partita */
            if(GiocarePartitaController.getInstance().inPartita()) {
                DebugHelper.log("OK: Avvio interfaccia partita interna.");
                this.mainWindow.setGuiState(UnoXTuttiGUI.GUIState.INSIDE_MATCH);
            } else {
                GUIUtils.showErrorMessage(mainWindow, "Errore durante la creazione della partita,\nriprovare con un altro nome.");
            }
        }
        
        /* Liberazione memoria da JDialog */
        dia.dispose();
    }//GEN-LAST:event_createMatchButtonActionPerformed

    
    /**
     * Avvia il flusso di ingresso in una partita
     * @param evt generato dal bottone
     */
    private void joinMatchButtonActionPerformed(java.awt.event.ActionEvent evt) {//GEN-FIRST:event_joinMatchButtonActionPerformed
        String matchName = matchList.getSelectedValue();
        if(matchName == null) {
            GUIUtils.showErrorMessage(mainWindow, "È necessario selezionare una partita.");
            return;
        }
        
        DebugHelper.log("Invio richiesta per ingresso in " + matchName);
        try {
            this.mainWindow.setWaiting(true);
            boolean result = GiocarePartitaController.getInstance().richiediIngresso(matchName);
            if(!result) {
                /* Richiesta fallita */
                GUIUtils.showErrorMessage(
                        mainWindow,
                        "Richiesta di accesso scartata.\n\nÈ possibile che la partita sia al completo "
                        + "oppure che il\nproprietario debba ancora rispondere ad una tua richiesta."
                );
            } else {
                GUIUtils.showInformationMessage(
                        mainWindow,
                        "La richiesta è stata presa in carico con successo!"
                );
            }
        } catch(Exception e) {
            GUIUtils.showException(e, mainWindow);
        } finally {
            this.mainWindow.setWaiting(false);
        }
    }//GEN-LAST:event_joinMatchButtonActionPerformed

    // Variables declaration - do not modify//GEN-BEGIN:variables
    private javax.swing.JButton createMatchButton;
    private javax.swing.JLabel jLabel1;
    private javax.swing.JLabel jLabel2;
    private javax.swing.JPanel jPanel1;
    private javax.swing.JPanel jPanel4;
    private javax.swing.JScrollPane jScrollPane1;
    private javax.swing.JScrollPane jScrollPane2;
    private javax.swing.JButton joinMatchButton;
    private javax.swing.JList<String> matchList;
    private javax.swing.JList<Player> playersList;
    private javax.swing.JButton roomExitButton;
    private javax.swing.JLabel roomNameLabel;
    private javax.swing.JPanel roomPanel;
    // End of variables declaration//GEN-END:variables
}
