/*
 * Progetto UnoXTutto per l'esame di Sviluppo Applicazione Software.
 * Rossi Riccardo, Giacobino Davide, Sguotti Leonardo
 */
package unoxtutti.gui;

import java.util.ArrayList;
import java.util.Collection;
import javax.swing.DefaultListModel;
import unoxtutti.GiocarePartitaController;
import unoxtutti.UnoXTutti;
import unoxtutti.domain.Card;
import unoxtutti.domain.Player;
import unoxtutti.domain.RemoteMatch;

/**
 *
 * @author Davide
 */
public class GameplayPanel extends MainWindowSubPanel {

    private RemoteMatch remoteMatch;
    
    /**
     * Creates new form GameplayPanel
     */
    public GameplayPanel() {
        initComponents();
    }

    /**
     * This method is called from within the constructor to initialize the form.
     * WARNING: Do NOT modify this code. The content of this method is always
     * regenerated by the Form Editor.
     */
    @SuppressWarnings("unchecked")
    // <editor-fold defaultstate="collapsed" desc="Generated Code">//GEN-BEGIN:initComponents
    private void initComponents() {

        jButton2 = new javax.swing.JButton();
        jSplitPane1 = new javax.swing.JSplitPane();
        turnsListPanel = new javax.swing.JPanel();
        jScrollPane1 = new javax.swing.JScrollPane();
        turnsList = new javax.swing.JList<>();
        mainPanel = new javax.swing.JPanel();
        jSplitPane2 = new javax.swing.JSplitPane();
        eventPanel = new javax.swing.JPanel();
        jScrollPane2 = new javax.swing.JScrollPane();
        eventList = new javax.swing.JList<>();
        cardsPanel = new javax.swing.JPanel();
        jScrollPane4 = new javax.swing.JScrollPane();
        cardsList = new javax.swing.JList<>();
        footerPanel = new javax.swing.JPanel();
        playCardButton = new javax.swing.JButton();
        pickCardButton = new javax.swing.JButton();
        checkBluffButton = new javax.swing.JButton();
        declareUNOButton = new javax.swing.JButton();

        jButton2.setText("jButton2");

        setLayout(new java.awt.BorderLayout());

        jSplitPane1.setDividerLocation(150);

        turnsListPanel.setLayout(new java.awt.BorderLayout());

        turnsList.setModel(new DefaultListModel());
        turnsList.setSelectionMode(javax.swing.ListSelectionModel.SINGLE_SELECTION);
        turnsList.setEnabled(false);
        jScrollPane1.setViewportView(turnsList);

        turnsListPanel.add(jScrollPane1, java.awt.BorderLayout.CENTER);

        jSplitPane1.setLeftComponent(turnsListPanel);

        mainPanel.setLayout(new java.awt.BorderLayout());

        jSplitPane2.setDividerLocation(400);

        eventPanel.setLayout(new java.awt.BorderLayout());

        eventList.setModel(new DefaultListModel());
        eventList.setSelectionMode(javax.swing.ListSelectionModel.SINGLE_SELECTION);
        jScrollPane2.setViewportView(eventList);

        eventPanel.add(jScrollPane2, java.awt.BorderLayout.CENTER);

        jSplitPane2.setLeftComponent(eventPanel);

        cardsPanel.setLayout(new java.awt.BorderLayout());

        cardsList.setModel(new DefaultListModel());
        cardsList.setSelectionMode(javax.swing.ListSelectionModel.SINGLE_SELECTION);
        cardsList.addMouseListener(new java.awt.event.MouseAdapter() {
            public void mouseClicked(java.awt.event.MouseEvent evt) {
                cardsListMouseClicked(evt);
            }
        });
        jScrollPane4.setViewportView(cardsList);

        cardsPanel.add(jScrollPane4, java.awt.BorderLayout.CENTER);

        jSplitPane2.setRightComponent(cardsPanel);

        mainPanel.add(jSplitPane2, java.awt.BorderLayout.CENTER);

        jSplitPane1.setRightComponent(mainPanel);

        add(jSplitPane1, java.awt.BorderLayout.CENTER);

        playCardButton.setText("Scarta carta");
        footerPanel.add(playCardButton);

        pickCardButton.setText("Pesca una carta");
        footerPanel.add(pickCardButton);

        checkBluffButton.setText("Dubita bluff");
        footerPanel.add(checkBluffButton);

        declareUNOButton.setText("Dichiara UNO!");
        footerPanel.add(declareUNOButton);

        add(footerPanel, java.awt.BorderLayout.SOUTH);
    }// </editor-fold>//GEN-END:initComponents

    private void cardsListMouseClicked(java.awt.event.MouseEvent evt) {//GEN-FIRST:event_cardsListMouseClicked
        Card card = (Card) cardsList.getSelectedValue();
        remoteMatch = GiocarePartitaController.getInstance().getCurrentMatch();
        
        if(!remoteMatch.isCardPlayable(card))
            playCardButton.setVisible(false);
        else
            playCardButton.setVisible(true);
    }//GEN-LAST:event_cardsListMouseClicked

    // Variables declaration - do not modify//GEN-BEGIN:variables
    private javax.swing.JList<Card> cardsList;
    private javax.swing.JPanel cardsPanel;
    private javax.swing.JButton checkBluffButton;
    private javax.swing.JButton declareUNOButton;
    private javax.swing.JList<String> eventList;
    private javax.swing.JPanel eventPanel;
    private javax.swing.JPanel footerPanel;
    private javax.swing.JButton jButton2;
    private javax.swing.JScrollPane jScrollPane1;
    private javax.swing.JScrollPane jScrollPane2;
    private javax.swing.JScrollPane jScrollPane4;
    private javax.swing.JSplitPane jSplitPane1;
    private javax.swing.JSplitPane jSplitPane2;
    private javax.swing.JPanel mainPanel;
    private javax.swing.JButton pickCardButton;
    private javax.swing.JButton playCardButton;
    private javax.swing.JList<String> turnsList;
    private javax.swing.JPanel turnsListPanel;
    // End of variables declaration//GEN-END:variables

    
    /**
     * Aggiorna la lista dei turni.
     * @param turns Ordine dei giocatori
     * @param currentPlayer Giocatore a cui spetta il turno
     * @param turnsDirection Direzione
     */
    public void updateTurns(ArrayList<Player> turns, Player currentPlayer, int turnsDirection) {
        DefaultListModel model = (DefaultListModel) turnsList.getModel();
        model.clear();
        turns.forEach((p) -> {
            model.addElement(p.getName());
        });
        // TODO: Evidenziare giocatore del turno corrente
    }

    /**
     * Aggiorna la lista delle carte e la carta del mazzo scarti.
     * @param mano Carte possedute dal giocatore
     * @param cartaMazzoScarti Carta del mazzo scarti attualmente sul tavolo
     * @param currentPlayer Giocatore a cui spetta il turno
     */
    public void updateCards(Collection<Card> mano, Card cartaMazzoScarti, Player currentPlayer) {
        DefaultListModel model = (DefaultListModel) cardsList.getModel();
        model.clear();
        mano.forEach((c) -> {
            model.addElement(c);
        });
        
        /**
         * Se tocca al giocatore, e quello precedente ha 
         * giocato un Jolly Pesca Quattro, il giocatore
         * corrente può dubitare un eventuale bluff.
         */
        if(cartaMazzoScarti.isJollyPescaQuattro() &&
                currentPlayer.equals(UnoXTutti.theUxtController.getPlayer())) {
            checkBluffButton.setEnabled(true);
            pickCardButton.setText("Pesca quattro carte");
        } else {
            checkBluffButton.setEnabled(false);
            pickCardButton.setText("Pesca una carta");
        }
        
        /* Se il giocatore corrente ha una carta, può dichiarare UNO! */
        if(mano.size() == 1) {
            declareUNOButton.setEnabled(true);
        } else {
            declareUNOButton.setEnabled(false);
        }
    }

    /**
     * Aggiorna la lista degli eventi
     * @param events Eventi accaduti durante la partita
     */
    public void updateEvents(Collection<String> events) {
        DefaultListModel model = (DefaultListModel) eventList.getModel();
        if(events.getClass() != ArrayList.class) {
            /* Refresh completo lista */
            model.clear();
            events.forEach((c) -> {
                model.addElement(c);
            });
        } else {
            /* Append dei nuovi elementi */
            ArrayList<String> list = (ArrayList<String>) events;
            for(int i = model.size(); i < list.size(); i++) {
                model.addElement(list.get(i));
            }
        }
    }

    private void isJollyPescaQuattro() {
        throw new UnsupportedOperationException("Not supported yet.");
    }
}
